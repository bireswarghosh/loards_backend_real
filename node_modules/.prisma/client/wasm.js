
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PackageScalarFieldEnum = {
  PackageId: 'PackageId',
  Package: 'Package',
  DescId: 'DescId',
  Rate: 'Rate',
  GSTAmt: 'GSTAmt'
};

exports.Prisma.ParameterIndoorScalarFieldEnum = {
  id: 'id',
  DoctotVisitInBill: 'DoctotVisitInBill',
  DoctotVisitInEst: 'DoctotVisitInEst',
  AddServiceMed: 'AddServiceMed',
  ServiceMedPer: 'ServiceMedPer',
  AddServiceDiag: 'AddServiceDiag',
  ServiceDiagPer: 'ServiceDiagPer',
  ChkOutTime: 'ChkOutTime',
  FixedServiceBed: 'FixedServiceBed',
  MedBillShow: 'MedBillShow',
  AddServiceOT: 'AddServiceOT',
  StartDt: 'StartDt',
  CopSCH: 'CopSCH',
  EditTime: 'EditTime',
  MedAdd: 'MedAdd',
  AddSrvDr: 'AddSrvDr',
  CM: 'CM',
  COMM: 'COMM',
  RecColl: 'RecColl',
  FBYN: 'FBYN',
  SMoneyYN: 'SMoneyYN',
  AdmChkTime: 'AdmChkTime',
  GChkTime: 'GChkTime',
  MedP: 'MedP',
  DagP: 'DagP',
  AdmTime: 'AdmTime',
  DIRA: 'DIRA',
  DIRF: 'DIRF',
  DuplicateMR: 'DuplicateMR',
  Nirnoy: 'Nirnoy',
  DIROP: 'DIROP',
  OTDtlYN: 'OTDtlYN',
  dcareeditYN: 'dcareeditYN',
  otherchargeheadingyn: 'otherchargeheadingyn',
  tpaotherchargeyn: 'tpaotherchargeyn',
  backdateentryyn: 'backdateentryyn',
  fbillc: 'fbillc',
  bedcal: 'bedcal',
  admineditamtchange: 'admineditamtchange',
  MedAdv: 'MedAdv',
  DisFinalBill: 'DisFinalBill',
  MRD: 'MRD',
  fbillprint: 'fbillprint',
  pbedcal: 'pbedcal',
  PtntNameYN: 'PtntNameYN',
  sdatewisebed: 'sdatewisebed',
  IndrDBName: 'IndrDBName',
  monthwiseadmno: 'monthwiseadmno',
  NoRec: 'NoRec',
  MaxCashRec: 'MaxCashRec',
  RefundRecYN: 'RefundRecYN',
  GSTP: 'GSTP',
  HealthCardP: 'HealthCardP'
};

exports.Prisma.DepgroupScalarFieldEnum = {
  DepGroupId: 'DepGroupId',
  DepGroup: 'DepGroup',
  Anst: 'Anst',
  Assi: 'Assi',
  Sour: 'Sour'
};

exports.Prisma.DepartmentIndoorScalarFieldEnum = {
  DepartmentId: 'DepartmentId',
  Department: 'Department',
  DepGroupId: 'DepGroupId',
  MinAdv: 'MinAdv',
  MaxBalance: 'MaxBalance',
  Referal: 'Referal',
  PSL: 'PSL',
  RateType: 'RateType'
};

exports.Prisma.BedMasterScalarFieldEnum = {
  BedId: 'BedId',
  Bed: 'Bed',
  DepartmentId: 'DepartmentId',
  BedCh: 'BedCh',
  AtttndantCh: 'AtttndantCh',
  TotalCh: 'TotalCh',
  ServiceCh: 'ServiceCh',
  ShowInFinal: 'ShowInFinal',
  Vacant: 'Vacant',
  ShortName: 'ShortName',
  RMOCh: 'RMOCh',
  BP: 'BP',
  RateEdit: 'RateEdit',
  GST: 'GST'
};

exports.Prisma.DayCareScalarFieldEnum = {
  DayCareId: 'DayCareId',
  DayCare: 'DayCare',
  Rate: 'Rate'
};

exports.Prisma.OtMasterScalarFieldEnum = {
  OtMasterId: 'OtMasterId',
  OtMaster: 'OtMaster',
  Rate: 'Rate'
};

exports.Prisma.OtSlotScalarFieldEnum = {
  OTSlotId: 'OTSlotId',
  OtMasterId: 'OtMasterId',
  OTSlot: 'OTSlot',
  Rate: 'Rate',
  DepGroupId: 'DepGroupId'
};

exports.Prisma.OtTypeScalarFieldEnum = {
  OtTypeId: 'OtTypeId',
  OtType: 'OtType'
};

exports.Prisma.OtCategoryScalarFieldEnum = {
  OtCategoryId: 'OtCategoryId',
  OtCategory: 'OtCategory'
};

exports.Prisma.OtItemScalarFieldEnum = {
  OtItemId: 'OtItemId',
  OtItem: 'OtItem',
  OtCategoryId: 'OtCategoryId',
  Rate: 'Rate',
  Unit: 'Unit',
  ServiceChYN: 'ServiceChYN'
};

exports.Prisma.AcHeadScalarFieldEnum = {
  ACHeadId: 'ACHeadId',
  ACHead: 'ACHead',
  System: 'System'
};

exports.Prisma.AcGroupScalarFieldEnum = {
  ACGroupId: 'ACGroupId',
  ACGroup: 'ACGroup',
  ACHeadId: 'ACHeadId',
  System: 'System'
};

exports.Prisma.AcSubGrpScalarFieldEnum = {
  AcSubGrpId: 'AcSubGrpId',
  SubGrp: 'SubGrp',
  AcGroupId: 'AcGroupId',
  system: 'system',
  LgrLike: 'LgrLike'
};

exports.Prisma.AcGenLedScalarFieldEnum = {
  DescId: 'DescId',
  Desc: 'Desc',
  ShortName: 'ShortName',
  OpTYpe: 'OpTYpe',
  OpBalance: 'OpBalance',
  AcType: 'AcType',
  Address1: 'Address1',
  Address2: 'Address2',
  Address3: 'Address3',
  Phone: 'Phone',
  ItPaNo: 'ItPaNo',
  CSTNo: 'CSTNo',
  LSTNo: 'LSTNo',
  TDS: 'TDS',
  System: 'System',
  LDATE: 'LDATE',
  IntId: 'IntId',
  PartyType: 'PartyType',
  EMail: 'EMail',
  AcSubGrpId: 'AcSubGrpId',
  EntType: 'EntType',
  BillFormatId: 'BillFormatId',
  VCode: 'VCode',
  SCode: 'SCode',
  IGST: 'IGST'
};

exports.Prisma.CashlessScalarFieldEnum = {
  CashlessId: 'CashlessId',
  Cashless: 'Cashless',
  Add1: 'Add1',
  Add2: 'Add2',
  Phone: 'Phone',
  Company: 'Company',
  Add3: 'Add3',
  emailid: 'emailid',
  contactperson: 'contactperson',
  cPhone: 'cPhone',
  servicecharge: 'servicecharge',
  AcGenLedCompany: 'AcGenLedCompany'
};

exports.Prisma.ReligionScalarFieldEnum = {
  ReligionId: 'ReligionId',
  Religion: 'Religion'
};

exports.Prisma.DiseaseScalarFieldEnum = {
  DiseaseId: 'DiseaseId',
  Disease: 'Disease',
  Diseasecode: 'Diseasecode'
};

exports.Prisma.CashpaymentheadScalarFieldEnum = {
  CashPaymentHeadId: 'CashPaymentHeadId',
  CashPaymentHead: 'CashPaymentHead',
  doctorId: 'doctorId',
  doctorY: 'doctorY'
};

exports.Prisma.DischargetemplateScalarFieldEnum = {
  DischargeTemplateId: 'DischargeTemplateId',
  DischaregeHead: 'DischaregeHead'
};

exports.Prisma.Appointment_booking_app_appointmentsScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  appointment_type: 'appointment_type',
  date: 'date',
  time: 'time',
  problem: 'problem',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cancel_reason: 'cancel_reason',
  Reschedule_date: 'Reschedule_date',
  Reschedule_time: 'Reschedule_time',
  video_call_link: 'video_call_link',
  video_room_id: 'video_room_id',
  payment_method: 'payment_method',
  transaction_id: 'transaction_id',
  booking_price: 'booking_price'
};

exports.Prisma.AppointmentBookingAppPatientScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  email: 'email',
  mobileNo: 'mobileNo',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  gender: 'gender',
  bloodGroup: 'bloodGroup',
  age: 'age',
  weight: 'weight'
};

exports.Prisma.HealthPackageScalarFieldEnum = {
  id: 'id',
  packageName: 'packageName',
  packagePrice: 'packagePrice',
  packageDescription: 'packageDescription',
  packageImage: 'packageImage',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageServiceScalarFieldEnum = {
  id: 'id',
  packageId: 'packageId',
  serviceName: 'serviceName',
  serviceDescription: 'serviceDescription',
  createdAt: 'createdAt'
};

exports.Prisma.PackagePurchaseScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  packageId: 'packageId',
  purchaseAmount: 'purchaseAmount',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  purchaseDate: 'purchaseDate',
  notes: 'notes'
};

exports.Prisma.MexecutiveScalarFieldEnum = {
  MExecutiveId: 'MExecutiveId',
  MExecutive: 'MExecutive',
  Add1: 'Add1',
  Add2: 'Add2',
  Add3: 'Add3',
  Phone: 'Phone'
};

exports.Prisma.ReferalScalarFieldEnum = {
  ReferalId: 'ReferalId',
  Referal: 'Referal',
  PhoneNo: 'PhoneNo',
  MExecutiveId: 'MExecutiveId'
};

exports.Prisma.PatientregistrationScalarFieldEnum = {
  RegistrationId: 'RegistrationId',
  RegistrationNo: 'RegistrationNo',
  RegistrationDate: 'RegistrationDate',
  RegistrationTime: 'RegistrationTime',
  PatientName: 'PatientName',
  Add1: 'Add1',
  Add2: 'Add2',
  Add3: 'Add3',
  Age: 'Age',
  AgeType: 'AgeType',
  Sex: 'Sex',
  MStatus: 'MStatus',
  PhoneNo: 'PhoneNo',
  AreaId: 'AreaId',
  ReligionId: 'ReligionId',
  UserId: 'UserId',
  SpecialityId: 'SpecialityId',
  DoctorId: 'DoctorId',
  RegCh: 'RegCh',
  AdvAmt: 'AdvAmt',
  Discount: 'Discount',
  TotAmount: 'TotAmount',
  BookingDate: 'BookingDate',
  BookingTime: 'BookingTime',
  cRegistrationNo: 'cRegistrationNo',
  EMailId: 'EMailId',
  PPr: 'PPr',
  CareOf: 'CareOf',
  GurdianName: 'GurdianName',
  AgeD: 'AgeD',
  AgeTypeD: 'AgeTypeD',
  AgeN: 'AgeN',
  AgeTypeN: 'AgeTypeN',
  Dob: 'Dob',
  Weight: 'Weight',
  Height: 'Height',
  BloodGroup: 'BloodGroup',
  bpmin: 'bpmin',
  bpmax: 'bpmax'
};

exports.Prisma.OutdoorbillmstScalarFieldEnum = {
  OutBillId: 'OutBillId',
  RegistrationId: 'RegistrationId',
  OutBillNo: 'OutBillNo',
  OutBillDate: 'OutBillDate',
  Amount: 'Amount',
  UserId: 'UserId',
  DoctorId: 'DoctorId',
  DiscAmt: 'DiscAmt',
  GTotal: 'GTotal',
  otbookdate: 'otbookdate',
  otbooktime: 'otbooktime',
  paidamt: 'paidamt',
  dueamt: 'dueamt',
  PaymentType: 'PaymentType',
  BANK: 'BANK',
  Cheque: 'Cheque',
  CompanyId: 'CompanyId',
  m_CompanyId: 'm_CompanyId',
  refdoc: 'refdoc',
  assdoc: 'assdoc',
  ansdoc: 'ansdoc',
  department: 'department',
  narration: 'narration',
  RegCh: 'RegCh',
  ProfCh: 'ProfCh',
  ServiceCh: 'ServiceCh',
  Patient_Discount: 'Patient_Discount',
  Professional_Discount: 'Professional_Discount',
  Service_Discount: 'Service_Discount'
};

exports.Prisma.AdmitionScalarFieldEnum = {
  AdmitionId: 'AdmitionId',
  AdmitionNo: 'AdmitionNo',
  AdmitionDate: 'AdmitionDate',
  AdmitionTime: 'AdmitionTime',
  BillTime: 'BillTime',
  OPD: 'OPD',
  OPDId: 'OPDId',
  Booking: 'Booking',
  BookingId: 'BookingId',
  PatientName: 'PatientName',
  Add1: 'Add1',
  Add2: 'Add2',
  Add3: 'Add3',
  Age: 'Age',
  AgeType: 'AgeType',
  Sex: 'Sex',
  MStatus: 'MStatus',
  PhoneNo: 'PhoneNo',
  AreaId: 'AreaId',
  ReligionId: 'ReligionId',
  GurdianName: 'GurdianName',
  Relation: 'Relation',
  RelativeName: 'RelativeName',
  RelativePhoneNo: 'RelativePhoneNo',
  Company: 'Company',
  CompanyId: 'CompanyId',
  DepartmentId: 'DepartmentId',
  BedId: 'BedId',
  UCDoctor1Id: 'UCDoctor1Id',
  UCDoctor2Id: 'UCDoctor2Id',
  UCDoctor3Id: 'UCDoctor3Id',
  DiseaseId: 'DiseaseId',
  RMOId: 'RMOId',
  Referral: 'Referral',
  ReferralId: 'ReferralId',
  RefDoctorId: 'RefDoctorId',
  Package: 'Package',
  PackageId: 'PackageId',
  PackageAmount: 'PackageAmount',
  CashLess: 'CashLess',
  CashLessId: 'CashLessId',
  UserId: 'UserId',
  Status: 'Status',
  Discharge: 'Discharge',
  AdmitionNo1: 'AdmitionNo1',
  Rename: 'Rename',
  AdmType: 'AdmType',
  InsComp: 'InsComp',
  DayCareYN: 'DayCareYN',
  BedRate: 'BedRate',
  DayCareId: 'DayCareId',
  PatientId: 'PatientId',
  Remarks: 'Remarks',
  SpRemarks: 'SpRemarks',
  IdentNo: 'IdentNo',
  PolcNo: 'PolcNo',
  CCNNo: 'CCNNo',
  CardNo: 'CardNo',
  PPN: 'PPN',
  BillDone: 'BillDone',
  Occupation: 'Occupation',
  Passport: 'Passport',
  DietChartId: 'DietChartId',
  tpaper: 'tpaper',
  PanNo: 'PanNo',
  PackageCHK: 'PackageCHK',
  nameemployer: 'nameemployer',
  refdate: 'refdate',
  Nameemp: 'Nameemp',
  empcode: 'empcode',
  RefDoctorId2: 'RefDoctorId2',
  packagevalid: 'packagevalid',
  optdiagoinc: 'optdiagoinc',
  optmediinc: 'optmediinc',
  optotherchargeinc: 'optotherchargeinc',
  Weight: 'Weight',
  oprationdate: 'oprationdate',
  optime: 'optime',
  AgeD: 'AgeD',
  AgeTypeD: 'AgeTypeD',
  AgeN: 'AgeN',
  AgeTypeN: 'AgeTypeN',
  URN: 'URN',
  packagestart: 'packagestart',
  AcGenLedCompany: 'AcGenLedCompany',
  optotinc: 'optotinc',
  MEXECUTIVE: 'MEXECUTIVE'
};

exports.Prisma.AdviceScalarFieldEnum = {
  AdviceId: 'AdviceId',
  Advice: 'Advice'
};

exports.Prisma.AgentpaymentScalarFieldEnum = {
  PaymentId: 'PaymentId',
  PaymentNo: 'PaymentNo',
  AgentId: 'AgentId',
  PayDate: 'PayDate',
  Amount: 'Amount',
  UserId: 'UserId',
  Discount: 'Discount'
};

exports.Prisma.Appointment_booking_app_ambulanceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Appointment_booking_app_ambulance_pickupScalarFieldEnum = {
  id: 'id',
  ambulance_id: 'ambulance_id',
  pickup_area: 'pickup_area',
  pickup_address: 'pickup_address',
  destination_area: 'destination_area',
  destination_address: 'destination_address',
  name: 'name',
  phone_number: 'phone_number',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  patient_id: 'patient_id'
};

exports.Prisma.Appointment_booking_app_doctorScalarFieldEnum = {
  id: 'id',
  doctorName: 'doctorName',
  email: 'email',
  phone: 'phone',
  password: 'password',
  speciality: 'speciality',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Appointment_booking_app_nursing_bookingsScalarFieldEnum = {
  id: 'id',
  nursing_package_id: 'nursing_package_id',
  patient_id: 'patient_id',
  admition_id: 'admition_id',
  start_date: 'start_date',
  end_date: 'end_date',
  existing_patient: 'existing_patient',
  patient_name: 'patient_name',
  phone_number: 'phone_number',
  email: 'email',
  gender: 'gender',
  age: 'age',
  address: 'address',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  advance_booking: 'advance_booking',
  transaction_id: 'transaction_id'
};

exports.Prisma.Appointment_booking_app_nursing_categoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Appointment_booking_app_nursing_packagesScalarFieldEnum = {
  id: 'id',
  nursing_category_id: 'nursing_category_id',
  package_name: 'package_name',
  duration: 'duration',
  price: 'price',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  service_type: 'service_type',
  overview_points: 'overview_points',
  advance_booking_price: 'advance_booking_price'
};

exports.Prisma.Appointment_booking_app_pickupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  pickupArea: 'pickupArea',
  pickupLandmark: 'pickupLandmark',
  destinationArea: 'destinationArea',
  destinationLandmark: 'destinationLandmark',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  patient_id: 'patient_id',
  ambulance_id: 'ambulance_id'
};

exports.Prisma.Appointment_booking_app_prescription_deliveryScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  name: 'name',
  phone_number: 'phone_number',
  prescription_image: 'prescription_image',
  delivery_type: 'delivery_type',
  home_delivery_location: 'home_delivery_location',
  home_delivery_address: 'home_delivery_address',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AreaScalarFieldEnum = {
  AreaId: 'AreaId',
  Area: 'Area',
  ZoneId: 'ZoneId',
  Rate: 'Rate'
};

exports.Prisma.Atcbhd01ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd02ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd03ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd04ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd05ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd06ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd07ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd08ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd09ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd10ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd11ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd12ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd13ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd14ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd15ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.Atcbhd17ScalarFieldEnum = {
  HeadId: 'HeadId',
  TType: 'TType',
  VoucherNo: 'VoucherNo',
  VoucherDt: 'VoucherDt',
  Amt: 'Amt',
  DC: 'DC',
  DescId: 'DescId',
  Pref: 'Pref',
  RefType: 'RefType',
  ReffId: 'ReffId',
  LDATE: 'LDATE',
  LTIME: 'LTIME',
  CuteDall: 'CuteDall',
  Narration: 'Narration',
  IntNo: 'IntNo',
  lslno: 'lslno'
};

exports.Prisma.BatchScalarFieldEnum = {
  BatchId: 'BatchId',
  Batch: 'Batch',
  ItemId: 'ItemId',
  ExpDate: 'ExpDate',
  MRP: 'MRP',
  EYN: 'EYN',
  EPrise: 'EPrise',
  BKP: 'BKP',
  prate: 'prate',
  saleYN: 'saleYN'
};

exports.Prisma.Billmaster01ScalarFieldEnum = {
  BIllId: 'BIllId',
  BillDate: 'BillDate',
  BillNo: 'BillNo',
  DescId: 'DescId',
  Party: 'Party',
  Discount: 'Discount',
  RoundOff: 'RoundOff',
  NetAmt: 'NetAmt',
  DateFrom: 'DateFrom',
  DateTo: 'DateTo',
  Narration: 'Narration',
  DiscP: 'DiscP',
  TaxType: 'TaxType',
  TaxP: 'TaxP',
  VatAmt: 'VatAmt',
  BillType: 'BillType',
  PType: 'PType',
  UserId: 'UserId',
  DepType: 'DepType',
  SlipNo: 'SlipNo',
  ChallanYN: 'ChallanYN',
  VatType: 'VatType',
  CompBillType: 'CompBillType',
  SubCompanyId: 'SubCompanyId',
  BillFormatId: 'BillFormatId',
  Doctor: 'Doctor',
  Address: 'Address',
  Replace: 'Replace',
  KP: 'KP',
  ROT: 'ROT',
  MDr: 'MDr',
  RBillNo: 'RBillNo',
  OPDId: 'OPDId',
  PaymentType: 'PaymentType',
  Remarks: 'Remarks',
  ReturnNo: 'ReturnNo',
  ReturnAmt: 'ReturnAmt',
  TotFreeValue: 'TotFreeValue',
  SGST: 'SGST',
  CGST: 'CGST',
  PPhNo: 'PPhNo',
  DPhNo: 'DPhNo',
  DAdd: 'DAdd',
  CreditCO: 'CreditCO',
  poYN: 'poYN',
  po: 'po',
  curDate: 'curDate',
  OPDId1: 'OPDId1',
  pbillno: 'pbillno',
  Age: 'Age',
  AgeType: 'AgeType',
  Sex: 'Sex',
  autodiscYN: 'autodiscYN',
  OUTSIDER: 'OUTSIDER',
  FRecDt: 'FRecDt',
  FRecAmt: 'FRecAmt',
  SRecDt: 'SRecDt',
  SRecAmt: 'SRecAmt',
  DueRecUser: 'DueRecUser'
};

exports.Prisma.BillprintheadScalarFieldEnum = {
  BillPrintHeadId: 'BillPrintHeadId',
  BillPrintHead: 'BillPrintHead',
  Slno: 'Slno'
};

exports.Prisma.Billreffr01ScalarFieldEnum = {
  ReffId: 'ReffId',
  BIllId: 'BIllId',
  HeadId: 'HeadId',
  Amt: 'Amt',
  AdjDate: 'AdjDate',
  BillType: 'BillType'
};

exports.Prisma.BiochemistryScalarFieldEnum = {
  BloodIdd: 'BloodIdd',
  PatientName: 'PatientName',
  CaseId: 'CaseId',
  CaseNo: 'CaseNo',
  LabId: 'LabId',
  ReportDt: 'ReportDt',
  PathologistId1: 'PathologistId1',
  PathologistId2: 'PathologistId2',
  PathologistId3: 'PathologistId3',
  GlucoseF: 'GlucoseF',
  GlucoseFUnit: 'GlucoseFUnit',
  GlucoseR: 'GlucoseR',
  GlucoseRFUnit: 'GlucoseRFUnit',
  GlucosePP: 'GlucosePP',
  GlucosePPUnit: 'GlucosePPUnit',
  HbA1c: 'HbA1c',
  HbA1cUnit: 'HbA1cUnit',
  BUN: 'BUN',
  BUNUnit: 'BUNUnit',
  Urea: 'Urea',
  UreaUnit: 'UreaUnit',
  Creatinine: 'Creatinine',
  CreatinineUnit: 'CreatinineUnit',
  UricAcid: 'UricAcid',
  UricAcidUnit: 'UricAcidUnit',
  BilirubinTotal: 'BilirubinTotal',
  BilirubinTotalUnit: 'BilirubinTotalUnit',
  BilirubinConj: 'BilirubinConj',
  BilirubinConjUnit: 'BilirubinConjUnit',
  Unconjugated: 'Unconjugated',
  UnconjugatedUnit: 'UnconjugatedUnit',
  SGOTAST: 'SGOTAST',
  SGOTASTUnit: 'SGOTASTUnit',
  SGPTALT: 'SGPTALT',
  SGPTALTUnit: 'SGPTALTUnit',
  ALP: 'ALP',
  ALPUnit: 'ALPUnit',
  TotalProtein: 'TotalProtein',
  TotalProteinUnit: 'TotalProteinUnit',
  Albumin: 'Albumin',
  AlbuminUnit: 'AlbuminUnit',
  Globulin: 'Globulin',
  GlobulinUnit: 'GlobulinUnit',
  AGRatio: 'AGRatio',
  AGRatioUnit: 'AGRatioUnit',
  GGT: 'GGT',
  GGTUnit: 'GGTUnit',
  Lipase: 'Lipase',
  LipaseUnit: 'LipaseUnit',
  Amylase: 'Amylase',
  AmylaseUnit: 'AmylaseUnit',
  Phenytoin: 'Phenytoin',
  PhenytoinUnit: 'PhenytoinUnit',
  SerumOsmolality: 'SerumOsmolality',
  SerumOsmolalityUnit: 'SerumOsmolalityUnit',
  Cholesterol: 'Cholesterol',
  CholesterolUnit: 'CholesterolUnit',
  HDL: 'HDL',
  HDLUnit: 'HDLUnit',
  LDL: 'LDL',
  LDLUnit: 'LDLUnit',
  VLDL: 'VLDL',
  VLDLUnit: 'VLDLUnit',
  CholHDL: 'CholHDL',
  CholHDLUnit: 'CholHDLUnit',
  Trilyceride: 'Trilyceride',
  TrilycerideUnit: 'TrilycerideUnit',
  Calcium: 'Calcium',
  CalciumUnit: 'CalciumUnit',
  Phosphate: 'Phosphate',
  PhosphateUnit: 'PhosphateUnit',
  Magnesium: 'Magnesium',
  MagnesiumUnit: 'MagnesiumUnit',
  Sodium: 'Sodium',
  SodiumUnit: 'SodiumUnit',
  Potassiums: 'Potassiums',
  potassiumsUnit: 'potassiumsUnit',
  Chloride: 'Chloride',
  ChlorideUnit: 'ChlorideUnit',
  Bicarbonate: 'Bicarbonate',
  BicarbonateUnit: 'BicarbonateUnit',
  CPK: 'CPK',
  CPKUnit: 'CPKUnit',
  CPKMB: 'CPKMB',
  CPKMBUnit: 'CPKMBUnit',
  LDH: 'LDH',
  LDHUnit: 'LDHUnit',
  Iron: 'Iron',
  IronUnit: 'IronUnit',
  TIBC: 'TIBC',
  TIBCUnit: 'TIBCUnit',
  Ammonia: 'Ammonia',
  AmmoniaUnit: 'AmmoniaUnit',
  Lactate: 'Lactate',
  LactateUnit: 'LactateUnit',
  ACPTotal: 'ACPTotal',
  ACPTotalUnit: 'ACPTotalUnit',
  ACPProstatic: 'ACPProstatic',
  ACPProstaticUnit: 'ACPProstaticUnit'
};

exports.Prisma.BirthcerScalarFieldEnum = {
  BirthCerId: 'BirthCerId',
  BirthCerNo: 'BirthCerNo',
  BirthTime: 'BirthTime',
  BirthCerDate: 'BirthCerDate',
  AdmitionId: 'AdmitionId',
  DischargeDate: 'DischargeDate',
  Father: 'Father',
  BirthDate: 'BirthDate',
  BirthNature: 'BirthNature',
  Sex: 'Sex',
  Weight: 'Weight',
  DoctorId: 'DoctorId',
  TwinBaby: 'TwinBaby'
};

exports.Prisma.BloodformatScalarFieldEnum = {
  BloodId: 'BloodId',
  CaseId: 'CaseId',
  ReportDt: 'ReportDt',
  PathologistId1: 'PathologistId1',
  PathologistId2: 'PathologistId2',
  PathologistId3: 'PathologistId3',
  Himoglobin1: 'Himoglobin1',
  Himoglobin2: 'Himoglobin2',
  Himoglobin3: 'Himoglobin3',
  Erythrocytes: 'Erythrocytes',
  ErythrocytesUnit: 'ErythrocytesUnit',
  Leucocytes: 'Leucocytes',
  LeucocytesUnit: 'LeucocytesUnit',
  Neutrophils: 'Neutrophils',
  Lymphocytes: 'Lymphocytes',
  Monocytes: 'Monocytes',
  Eosinophils: 'Eosinophils',
  Basophils: 'Basophils',
  AbnCell1: 'AbnCell1',
  AbnCell1Val: 'AbnCell1Val',
  AbnCell2: 'AbnCell2',
  AbnCell2Val: 'AbnCell2Val',
  AbnCell3: 'AbnCell3',
  AbnCell3Val: 'AbnCell3Val',
  AbnCell4: 'AbnCell4',
  AbnCell4Val: 'AbnCell4Val',
  SemearStudy1: 'SemearStudy1',
  SemearStudy2: 'SemearStudy2',
  SemearStudy3: 'SemearStudy3',
  StHrsCount: 'StHrsCount',
  ndHrsCount: 'ndHrsCount',
  MeanESR: 'MeanESR',
  PCV: 'PCV',
  PCVUnit: 'PCVUnit',
  MCV: 'MCV',
  MCVUnit: 'MCVUnit',
  MCH: 'MCH',
  MCHUnit: 'MCHUnit',
  MCHC: 'MCHC',
  MCHCUnit: 'MCHCUnit',
  RDW: 'RDW',
  RDWUnit: 'RDWUnit',
  PalletsCount: 'PalletsCount',
  ReticulocyCount: 'ReticulocyCount',
  MaleriaParasite: 'MaleriaParasite',
  BleedTimeMin: 'BleedTimeMin',
  BleedTimeSec: 'BleedTimeSec',
  CoagulMin: 'CoagulMin',
  CoagulSec: 'CoagulSec',
  Remarks: 'Remarks',
  PalateCountUnit: 'PalateCountUnit',
  LabId: 'LabId',
  AbnCell5: 'AbnCell5',
  AbnCell5Val: 'AbnCell5Val',
  AbnCell6: 'AbnCell6',
  AbnCell6Val: 'AbnCell6Val',
  AdEosCount: 'AdEosCount',
  NucleatedRBC: 'NucleatedRBC',
  NucleatedRBCUnit: 'NucleatedRBCUnit',
  CorrectedWBCCount: 'CorrectedWBCCount',
  CorrectedWBCCountUnit: 'CorrectedWBCCountUnit',
  ReportTime: 'ReportTime',
  BloodGroup: 'BloodGroup',
  RHType: 'RHType',
  PDW: 'PDW',
  PDWUnit: 'PDWUnit'
};

exports.Prisma.Bodyfluid01ScalarFieldEnum = {
  BodyFluid: 'BodyFluid',
  PatientName: 'PatientName',
  CaseId: 'CaseId',
  CaseNo: 'CaseNo',
  LabId: 'LabId',
  ReportDt: 'ReportDt',
  TypeofFluid: 'TypeofFluid',
  Color: 'Color',
  Quantity: 'Quantity',
  QuantityUnit: 'QuantityUnit',
  Appearance: 'Appearance',
  AppearanceUnit: 'AppearanceUnit',
  Coagulum: 'Coagulum',
  CoagulumUnit: 'CoagulumUnit',
  TotalCellCount: 'TotalCellCount',
  TotalCellCountUnit: 'TotalCellCountUnit',
  Neutrophil: 'Neutrophil',
  NeutrophilUnit: 'NeutrophilUnit',
  Lymphocyte: 'Lymphocyte',
  LymphocyteUnit: 'LymphocyteUnit',
  Eosinophil: 'Eosinophil',
  EosinophilUnit: 'EosinophilUnit',
  RBC: 'RBC',
  RBCUnit: 'RBCUnit',
  MOthers: 'MOthers',
  MOthersUnit: 'MOthersUnit',
  Glucose: 'Glucose',
  GlucoseUnit: 'GlucoseUnit',
  TotalProtine: 'TotalProtine',
  TotalProtineUnit: 'TotalProtineUnit',
  Chiloride: 'Chiloride',
  ChilorideUnit: 'ChilorideUnit',
  LDH: 'LDH',
  LDHUnit: 'LDHUnit',
  ADH: 'ADH',
  ADHUnit: 'ADHUnit',
  COthers: 'COthers',
  COthersUnit: 'COthersUnit',
  Reaction: 'Reaction',
  ZIEHL: 'ZIEHL',
  GRAM: 'GRAM',
  Other: 'Other'
};

exports.Prisma.BomScalarFieldEnum = {
  BomId: 'BomId',
  TestId: 'TestId'
};

exports.Prisma.Booking01ScalarFieldEnum = {
  BookingId: 'BookingId',
  BookingTime: 'BookingTime',
  BookingDate: 'BookingDate',
  BookingFor: 'BookingFor',
  BookingP: 'BookingP',
  BookingNo: 'BookingNo',
  BookingS: 'BookingS',
  PatientName: 'PatientName',
  Add1: 'Add1',
  Add2: 'Add2',
  Add3: 'Add3',
  Phone: 'Phone',
  Age: 'Age',
  AgeType: 'AgeType',
  Sex: 'Sex',
  DoctorId: 'DoctorId',
  CompanyId: 'CompanyId',
  m_CompanyId: 'm_CompanyId',
  UserId: 'UserId',
  Total: 'Total',
  Receipt: 'Receipt',
  CancelBookig: 'CancelBookig',
  CancelDate: 'CancelDate',
  CancelR: 'CancelR',
  BTime: 'BTime',
  Remarks: 'Remarks',
  PPr: 'PPr',
  LabId: 'LabId',
  AgentId: 'AgentId',
  OPDRegNo: 'OPDRegNo',
  CashBank: 'CashBank',
  ServiceCh: 'ServiceCh',
  DiscP: 'DiscP',
  DiscAmt: 'DiscAmt',
  GTotal: 'GTotal',
  CollectorId: 'CollectorId',
  CardNo: 'CardNo'
};

exports.Prisma.CategorymstScalarFieldEnum = {
  CategoryId: 'CategoryId',
  Category: 'Category',
  CategoryType: 'CategoryType'
};

exports.Prisma.ChallanScalarFieldEnum = {
  ChallanId: 'ChallanId',
  ChallanDate: 'ChallanDate',
  ChallanNo: 'ChallanNo',
  PoYN: 'PoYN',
  POId: 'POId',
  DescId: 'DescId',
  UserId: 'UserId',
  BillYN: 'BillYN',
  BillId: 'BillId',
  ChallanType: 'ChallanType'
};

exports.Prisma.ChiefScalarFieldEnum = {
  chiefId: 'chiefId',
  chief: 'chief'
};

exports.Prisma.CollectorScalarFieldEnum = {
  CollectorId: 'CollectorId',
  Collector: 'Collector',
  Add1: 'Add1',
  Add2: 'Add2',
  Add3: 'Add3',
  Phone: 'Phone',
  Zone: 'Zone',
  Share: 'Share',
  ShortName: 'ShortName'
};

exports.Prisma.CompanymstScalarFieldEnum = {
  CompanyId: 'CompanyId',
  Company: 'Company',
  Type: 'Type'
};

exports.Prisma.ConsentScalarFieldEnum = {
  ConsentId: 'ConsentId',
  Consent: 'Consent',
  Description: 'Description'
};

exports.Prisma.ConsententryScalarFieldEnum = {
  ConsentEntryId: 'ConsentEntryId',
  ConsentEntryNo: 'ConsentEntryNo',
  ConsentEntryTime: 'ConsentEntryTime',
  ConsentEntryDate: 'ConsentEntryDate',
  AdmitionId: 'AdmitionId',
  ConsentId: 'ConsentId'
};

exports.Prisma.CreditcareofmstScalarFieldEnum = {
  CareOfId: 'CareOfId',
  CareOf: 'CareOf',
  CareOfType: 'CareOfType'
};

exports.Prisma.Ctest01ScalarFieldEnum = {
  CTestId: 'CTestId',
  CTestNo: 'CTestNo',
  CTime: 'CTime',
  CancelDate: 'CancelDate',
  CaseId: 'CaseId',
  UserId: 'UserId',
  Remarks: 'Remarks'
};

exports.Prisma.CulturemstScalarFieldEnum = {
  CultureId: 'CultureId',
  PatientName: 'PatientName',
  CaseId: 'CaseId',
  CaseNo: 'CaseNo',
  LabId: 'LabId',
  ReportDt: 'ReportDt',
  PathologistId1: 'PathologistId1',
  PathologistId2: 'PathologistId2',
  PathologistId3: 'PathologistId3',
  GYN: 'GYN',
  Specimen: 'Specimen',
  Remarks: 'Remarks',
  Colony: 'Colony',
  Nots: 'Nots',
  Smear: 'Smear',
  Culture: 'Culture'
};

exports.Prisma.DeathcerScalarFieldEnum = {
  DeathCerId: 'DeathCerId',
  DeathCerNo: 'DeathCerNo',
  DeathTime: 'DeathTime',
  DeathCerDate: 'DeathCerDate',
  AdmitionId: 'AdmitionId',
  SonDaughter: 'SonDaughter',
  WifeOf: 'WifeOf',
  DeathDate: 'DeathDate',
  DeathCause: 'DeathCause',
  DoctorId: 'DoctorId',
  TwinBaby1: 'TwinBaby1',
  TwinBaby2: 'TwinBaby2'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  DepartmentId: 'DepartmentId',
  Department: 'Department',
  DepShName: 'DepShName',
  BP: 'BP'
};

exports.Prisma.Diagnostic_bookingsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  test_id: 'test_id',
  patient_id: 'patient_id',
  booking_date: 'booking_date',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  appointment_date: 'appointment_date',
  appointment_time: 'appointment_time',
  diagnostic_prescription: 'diagnostic_prescription'
};

exports.Prisma.DiagoScalarFieldEnum = {
  diagoId: 'diagoId',
  diago: 'diago'
};

exports.Prisma.DietchartScalarFieldEnum = {
  DietChartId: 'DietChartId',
  DietChart: 'DietChart',
  Description: 'Description'
};

exports.Prisma.DietentryScalarFieldEnum = {
  DietEntryId: 'DietEntryId',
  DietEntryNo: 'DietEntryNo',
  DietEntryTime: 'DietEntryTime',
  DietEntryDate: 'DietEntryDate',
  AdmitionId: 'AdmitionId',
  DietChartId: 'DietChartId'
};

exports.Prisma.DiscavdScalarFieldEnum = {
  DiscAvdId: 'DiscAvdId',
  DiscAvd: 'DiscAvd',
  Description: 'Description'
};

exports.Prisma.DiscertScalarFieldEnum = {
  DisCerId: 'DisCerId',
  DisCerNo: 'DisCerNo',
  DisCerTime: 'DisCerTime',
  DisCerDate: 'DisCerDate',
  AdmitionId: 'AdmitionId',
  DischargeTemplateId: 'DischargeTemplateId',
  DiscType: 'DiscType',
  D: 'D',
  A: 'A',
  B: 'B',
  C: 'C',
  E: 'E',
  F: 'F',
  Follow: 'Follow',
  UserId: 'UserId',
  OtDate: 'OtDate',
  Remarks: 'Remarks',
  G: 'G',
  OTTypeId: 'OTTypeId',
  DepGroupId: 'DepGroupId'
};

exports.Prisma.DoctorcashpaymentScalarFieldEnum = {
  cashPaymentId: 'cashPaymentId',
  DoctorId: 'DoctorId',
  PayDate: 'PayDate',
  Amount: 'Amount',
  UserId: 'UserId',
  PaymentNo: 'PaymentNo',
  Tds: 'Tds',
  optindorout: 'optindorout',
  optoutdoor: 'optoutdoor'
};

exports.Prisma.DoctormasterScalarFieldEnum = {
  DoctorId: 'DoctorId',
  Doctor: 'Doctor',
  Add1: 'Add1',
  Add2: 'Add2',
  Add3: 'Add3',
  Phone: 'Phone',
  Fax: 'Fax',
  Identification: 'Identification',
  Qualification: 'Qualification',
  IndoorRate: 'IndoorRate',
  MExecutiveId: 'MExecutiveId',
  SpecialityId: 'SpecialityId',
  Commission: 'Commission',
  FixedDiscount: 'FixedDiscount',
  MarkDoctorId: 'MarkDoctorId',
  RMO: 'RMO',
  DrPr: 'DrPr',
  IndoorYN: 'IndoorYN',
  NotReq: 'NotReq',
  Panel: 'Panel',
  CreateDate: 'CreateDate',
  RegistrationNo: 'RegistrationNo',
  Photo: 'Photo',
  Qualification2: 'Qualification2',
  Qualification3: 'Qualification3',
  Qualification4: 'Qualification4',
  areacode: 'areacode',
  ICURate: 'ICURate',
  CABRate: 'CABRate',
  SUITRate: 'SUITRate',
  Status: 'Status',
  Email: 'Email',
  Password: 'Password',
  online_booking_app_booking_price: 'online_booking_app_booking_price'
};

exports.Prisma.DoctorvisitScalarFieldEnum = {
  DoctorVisitId: 'DoctorVisitId',
  AdmitionId: 'AdmitionId',
  DoctorId: 'DoctorId',
  Rate: 'Rate',
  VisitDate: 'VisitDate',
  VisitTime: 'VisitTime',
  UserId: 'UserId',
  NoOfVisit: 'NoOfVisit',
  Amount: 'Amount',
  TypeOfVisit: 'TypeOfVisit',
  Adv1: 'Adv1',
  Adv2: 'Adv2',
  payAmount: 'payAmount',
  paidAmount: 'paidAmount',
  paiddate: 'paiddate',
  Clearing: 'Clearing',
  VUNIT: 'VUNIT',
  cashno: 'cashno',
  Package: 'Package'
};

exports.Prisma.DoseScalarFieldEnum = {
  DoseId: 'DoseId',
  Dose: 'Dose'
};

exports.Prisma.DpackageScalarFieldEnum = {
  DpackageId: 'DpackageId',
  Dpackage: 'Dpackage',
  Rate: 'Rate',
  SubDepartmentId: 'SubDepartmentId'
};

exports.Prisma.DripcategorymasterScalarFieldEnum = {
  DrIPCategoryId: 'DrIPCategoryId',
  DrIPCategory: 'DrIPCategory',
  ShortName: 'ShortName'
};

exports.Prisma.DtpropertiesScalarFieldEnum = {
  id: 'id',
  objectid: 'objectid',
  property: 'property',
  value: 'value',
  uvalue: 'uvalue',
  lvalue: 'lvalue',
  version: 'version'
};

exports.Prisma.DuereceiptScalarFieldEnum = {
  RecId: 'RecId',
  RecNo: 'RecNo',
  RecDate: 'RecDate',
  BillId: 'BillId',
  Amount: 'Amount',
  UserId: 'UserId'
};

exports.Prisma.EncriptScalarFieldEnum = {
  RegId: 'RegId',
  RegNo: 'RegNo',
  Name: 'Name',
  FromDate: 'FromDate',
  ToDate: 'ToDate',
  LastLogDate: 'LastLogDate'
};

exports.Prisma.EyesalemstScalarFieldEnum = {
  BIllId: 'BIllId',
  BillDate: 'BillDate',
  BillNo: 'BillNo',
  DescId: 'DescId',
  Party: 'Party',
  Discount: 'Discount',
  RoundOff: 'RoundOff',
  NetAmt: 'NetAmt',
  DateFrom: 'DateFrom',
  DateTo: 'DateTo',
  Narration: 'Narration',
  DiscP: 'DiscP',
  TaxType: 'TaxType',
  TaxP: 'TaxP',
  VatAmt: 'VatAmt',
  BillType: 'BillType',
  PType: 'PType',
  UserId: 'UserId',
  DepType: 'DepType',
  SlipNo: 'SlipNo',
  ChallanYN: 'ChallanYN',
  VatType: 'VatType',
  CompBillType: 'CompBillType',
  SubCompanyId: 'SubCompanyId',
  BillFormatId: 'BillFormatId',
  Doctor: 'Doctor',
  Address: 'Address',
  Replace: 'Replace',
  KP: 'KP',
  ROT: 'ROT',
  MDr: 'MDr',
  ReceiptAmt: 'ReceiptAmt',
  BalancAmt: 'BalancAmt',
  DeliveryDt: 'DeliveryDt',
  ClearYN: 'ClearYN',
  AgentId: 'AgentId',
  OPDId: 'OPDId',
  ClearDt: 'ClearDt'
};

exports.Prisma.FbScalarFieldEnum = {
  FinalBillId: 'FinalBillId',
  BillNo: 'BillNo',
  BillDate: 'BillDate',
  BillTime: 'BillTime',
  ReleaseTime: 'ReleaseTime',
  BillType: 'BillType',
  ReffId: 'ReffId',
  Discount: 'Discount',
  ReciptAmt: 'ReciptAmt',
  CB: 'CB',
  ChequeNo: 'ChequeNo',
  ChequeDt: 'ChequeDt',
  BankName: 'BankName',
  CashlessId: 'CashlessId',
  Rename: 'Rename',
  UserId: 'UserId',
  MoneyreeciptId: 'MoneyreeciptId',
  BillAmt: 'BillAmt',
  Remarks: 'Remarks',
  EditBill: 'EditBill',
  TDS: 'TDS',
  TDSDate: 'TDSDate',
  MBillNo: 'MBillNo',
  Approval: 'Approval',
  ServiceTax: 'ServiceTax',
  TaxInc: 'TaxInc',
  PatiectPartyAmt: 'PatiectPartyAmt',
  CorpPabley: 'CorpPabley'
};

exports.Prisma.GodownScalarFieldEnum = {
  GodownId: 'GodownId',
  Godown: 'Godown',
  GodownTYPE: 'GodownTYPE'
};

exports.Prisma.GoodsreplacednoteScalarFieldEnum = {
  GoodsReplacedNoteId: 'GoodsReplacedNoteId',
  GoodsReplacedNoteNo: 'GoodsReplacedNoteNo',
  NoteDate: 'NoteDate',
  RBIllId: 'RBIllId',
  RBIllNo: 'RBIllNo',
  SBIllId: 'SBIllId',
  SBIllNo: 'SBIllNo',
  DescId: 'DescId',
  Party: 'Party',
  UserId: 'UserId'
};

exports.Prisma.GstmstScalarFieldEnum = {
  GSTId: 'GSTId',
  GST: 'GST'
};

exports.Prisma.IndoorcompanyScalarFieldEnum = {
  IndoorCompanyId: 'IndoorCompanyId',
  IndoorCompany: 'IndoorCompany'
};

exports.Prisma.IndoormoneyreeciptScalarFieldEnum = {
  MoneyreeciptId: 'MoneyreeciptId',
  MoneyreeciptNo: 'MoneyreeciptNo',
  RefferenceId: 'RefferenceId',
  ReceiptType: 'ReceiptType',
  ReceiptDate: 'ReceiptDate',
  PaymentType: 'PaymentType',
  Amount: 'Amount',
  Bank: 'Bank',
  Cheque: 'Cheque',
  ChqDate: 'ChqDate',
  Narration: 'Narration',
  UserId: 'UserId',
  SlipNo: 'SlipNo',
  ClearDate: 'ClearDate',
  TDS: 'TDS',
  PaidBy: 'PaidBy',
  Remarks: 'Remarks',
  ReceiptTime: 'ReceiptTime',
  PrintDate: 'PrintDate'
};

exports.Prisma.IpdbookingScalarFieldEnum = {
  BookingID: 'BookingID',
  BookingNo: 'BookingNo',
  BookingDate: 'BookingDate',
  BookingTime: 'BookingTime',
  BookingFor: 'BookingFor',
  OPD: 'OPD',
  OPDId: 'OPDId',
  PatientName: 'PatientName',
  Add1: 'Add1',
  Add2: 'Add2',
  Add3: 'Add3',
  Age: 'Age',
  AgeType: 'AgeType',
  Sex: 'Sex',
  MStatus: 'MStatus',
  PhoneNo: 'PhoneNo',
  AreaId: 'AreaId',
  ReligionId: 'ReligionId',
  GurdianName: 'GurdianName',
  Relation: 'Relation',
  RelativeName: 'RelativeName',
  RelativePhoneNo: 'RelativePhoneNo',
  Amount: 'Amount',
  ReceiptType: 'ReceiptType',
  Bank: 'Bank',
  Cheque: 'Cheque',
  ChqDate: 'ChqDate',
  Narration: 'Narration',
  UserId: 'UserId',
  Cleardate: 'Cleardate',
  PaidBy: 'PaidBy',
  UCDoctor1Id: 'UCDoctor1Id',
  UCDoctor2Id: 'UCDoctor2Id',
  UCDoctor3Id: 'UCDoctor3Id',
  Package: 'Package',
  PackageId: 'PackageId',
  PackageAmount: 'PackageAmount',
  AdmitionId: 'AdmitionId',
  AdmitionDate: 'AdmitionDate',
  OtherAmt: 'OtherAmt',
  DiseaseId: 'DiseaseId',
  ot: 'ot',
  otId: 'otId',
  otAmount: 'otAmount',
  AgeN: 'AgeN',
  AgeD: 'AgeD'
};

exports.Prisma.IssuedepmasterScalarFieldEnum = {
  IssueDepId: 'IssueDepId',
  IssueDate: 'IssueDate',
  IssueDepNo: 'IssueDepNo',
  DepartmentId: 'DepartmentId',
  UserId: 'UserId',
  Discount: 'Discount',
  RoundOff: 'RoundOff',
  NetAmount: 'NetAmount'
};

exports.Prisma.IssuemedmasterScalarFieldEnum = {
  IssueMedId: 'IssueMedId',
  AdmitionId: 'AdmitionId',
  IssueDate: 'IssueDate',
  IssueMedNo: 'IssueMedNo',
  UserId: 'UserId',
  Discount: 'Discount',
  RoundOff: 'RoundOff',
  NetAmount: 'NetAmount',
  BedId: 'BedId',
  MBedNo: 'MBedNo',
  IssueType: 'IssueType',
  RecAmt: 'RecAmt',
  CGST: 'CGST',
  SGST: 'SGST',
  medireqyn: 'medireqyn',
  Reqno: 'Reqno',
  CheckIn: 'CheckIn',
  delDt: 'delDt',
  delTime: 'delTime',
  issueTime: 'issueTime'
};

exports.Prisma.IssuemedmastercScalarFieldEnum = {
  IssueMedId: 'IssueMedId',
  AdmitionId: 'AdmitionId',
  IssueDate: 'IssueDate',
  IssueMedNo: 'IssueMedNo',
  UserId: 'UserId',
  Discount: 'Discount',
  RoundOff: 'RoundOff',
  NetAmount: 'NetAmount',
  BedId: 'BedId',
  MBedNo: 'MBedNo',
  IssueType: 'IssueType'
};

exports.Prisma.Issuemst01ScalarFieldEnum = {
  IssueId: 'IssueId',
  IssueDate: 'IssueDate',
  IssueNo: 'IssueNo',
  UserId: 'UserId',
  DepartmentId: 'DepartmentId'
};

exports.Prisma.ItemgroupScalarFieldEnum = {
  ItemGroupId: 'ItemGroupId',
  ItemGroup: 'ItemGroup',
  ItemGroupType: 'ItemGroupType'
};

exports.Prisma.ItemmstScalarFieldEnum = {
  ItemId: 'ItemId',
  ItemGroupId: 'ItemGroupId',
  ItemSubGroupId: 'ItemSubGroupId',
  Item: 'Item',
  PUnit: 'PUnit',
  SUnit: 'SUnit',
  Factor: 'Factor',
  ReOrLebel: 'ReOrLebel',
  ItemType: 'ItemType',
  SaleRate: 'SaleRate',
  VatP: 'VatP',
  SubGroupId: 'SubGroupId',
  CategoryId: 'CategoryId',
  CSTP: 'CSTP',
  spect: 'spect',
  DiscP: 'DiscP',
  Prec: 'Prec',
  HSNCode: 'HSNCode',
  InAdmCh: 'InAdmCh',
  minstockcentral: 'minstockcentral',
  sdh: 'sdh',
  sdx: 'sdx',
  tarmadol: 'tarmadol',
  narcotic: 'narcotic',
  RACKId: 'RACKId',
  GSTID: 'GSTID',
  igst: 'igst'
};

exports.Prisma.ItemsubgroupScalarFieldEnum = {
  ItemSubGroupId: 'ItemSubGroupId',
  ItemSubGroup: 'ItemSubGroup',
  ItemGroupId: 'ItemGroupId',
  SubGroupType: 'SubGroupType'
};

exports.Prisma.LabScalarFieldEnum = {
  LabId: 'LabId',
  Lab: 'Lab',
  Add1: 'Add1',
  Add2: 'Add2',
  Add3: 'Add3',
  MExecutiveId: 'MExecutiveId',
  AccType: 'AccType'
};

exports.Prisma.MedeadvancereceiptScalarFieldEnum = {
  IndReceiptId: 'IndReceiptId',
  IndReceiptNo: 'IndReceiptNo',
  AdmitionId: 'AdmitionId',
  ReceiptDate: 'ReceiptDate',
  Amount: 'Amount',
  UserId: 'UserId',
  Narrtion: 'Narrtion',
  PaymentType: 'PaymentType',
  BANK: 'BANK',
  Cheque: 'Cheque',
  ChqDate: 'ChqDate',
  IssueId: 'IssueId',
  ReffId: 'ReffId'
};

exports.Prisma.MedeindoorbillScalarFieldEnum = {
  IndoorBillId: 'IndoorBillId',
  IndoorBillNo: 'IndoorBillNo',
  AdmitionId: 'AdmitionId',
  BillDate: 'BillDate',
  TotAmount: 'TotAmount',
  DiscAmount: 'DiscAmount',
  RoundOff: 'RoundOff',
  BillAmount: 'BillAmount',
  UserId: 'UserId',
  RefundAmt: 'RefundAmt',
  AdvAmt: 'AdvAmt',
  IssueAmt: 'IssueAmt',
  ReturenAmt: 'ReturenAmt',
  AdjAmt: 'AdjAmt',
  RecAmt: 'RecAmt',
  Remarks: 'Remarks'
};

exports.Prisma.NurseScalarFieldEnum = {
  NurseId: 'NurseId',
  Nurse: 'Nurse',
  Add1: 'Add1',
  Add2: 'Add2',
  Add3: 'Add3',
  GroupType: 'GroupType'
};

exports.Prisma.OtbillScalarFieldEnum = {
  OtBillId: 'OtBillId',
  AdmitionId: 'AdmitionId',
  OtBillNo: 'OtBillNo',
  BillDate: 'BillDate',
  AnesthesiaDocId: 'AnesthesiaDocId',
  AnesthesiaAmt: 'AnesthesiaAmt',
  SergonDocId: 'SergonDocId',
  SergonDocAmt: 'SergonDocAmt',
  OthersDocId: 'OthersDocId',
  OthersDocAmt: 'OthersDocAmt',
  OTId: 'OTId',
  OTType: 'OTType',
  OTAmt: 'OTAmt',
  ConsumableAmt: 'ConsumableAmt',
  InstrumentAmt: 'InstrumentAmt',
  MedicineAmt: 'MedicineAmt',
  TotalAmt: 'TotalAmt',
  OtTypeId: 'OtTypeId',
  OthersCh: 'OthersCh',
  UserId: 'UserId',
  OTSlotId: 'OTSlotId',
  OTHr: 'OTHr',
  OTMinit: 'OTMinit',
  OTMBill: 'OTMBill',
  anttype: 'anttype',
  Incision: 'Incision',
  PreOperativeDiagonistic: 'PreOperativeDiagonistic',
  PostOperativeDiagonistic: 'PostOperativeDiagonistic',
  Findings: 'Findings',
  Steps: 'Steps',
  Closure: 'Closure',
  OperativeDifficulties: 'OperativeDifficulties',
  Count: 'Count',
  BloodLoss: 'BloodLoss',
  Transfusion: 'Transfusion'
};

exports.Prisma.OtherchargesScalarFieldEnum = {
  OtherChargesId: 'OtherChargesId',
  OtherCharges: 'OtherCharges',
  DepGroupId: 'DepGroupId',
  DescId: 'DescId',
  Rate: 'Rate',
  Unit: 'Unit',
  ServiceCh: 'ServiceCh',
  ShowInFinal: 'ShowInFinal',
  BillPrintHeadId: 'BillPrintHeadId',
  ConcYN: 'ConcYN',
  QtyReq: 'QtyReq',
  Code: 'Code',
  EditRate: 'EditRate',
  NotReq: 'NotReq',
  BP: 'BP',
  PPN: 'PPN',
  PPNAmt: 'PPNAmt',
  InAdmCh: 'InAdmCh',
  cCode: 'cCode',
  CSTP: 'CSTP',
  SGST: 'SGST',
  vatp: 'vatp',
  IncludeGst: 'IncludeGst',
  ICU: 'ICU',
  CAB: 'CAB',
  SUIT: 'SUIT',
  IPYN: 'IPYN',
  corporateyn: 'corporateyn'
};

exports.Prisma.OutdoorotherchargeScalarFieldEnum = {
  OtherChId: 'OtherChId',
  OtherCharge: 'OtherCharge',
  Rate: 'Rate',
  UNIT: 'UNIT',
  OT: 'OT',
  OTSLOTID: 'OTSLOTID'
};

exports.Prisma.PackScalarFieldEnum = {
  PackId: 'PackId',
  Pack: 'Pack'
};

exports.Prisma.PasthistoryScalarFieldEnum = {
  pasthistoryId: 'pasthistoryId',
  pasthistory: 'pasthistory'
};

exports.Prisma.PathologistScalarFieldEnum = {
  PathologistId: 'PathologistId',
  Pathologist: 'Pathologist',
  Qua1: 'Qua1',
  Qua2: 'Qua2',
  Greetings: 'Greetings',
  Qua3: 'Qua3',
  Qua4: 'Qua4',
  Signature: 'Signature',
  PassWord: 'PassWord',
  GreetingsId: 'GreetingsId',
  Registration: 'Registration'
};

exports.Prisma.PathologistloginScalarFieldEnum = {
  PthlogistLoginId: 'PthlogistLoginId',
  PathologistId: 'PathologistId',
  Pathologist: 'Pathologist',
  LoginDate: 'LoginDate'
};

exports.Prisma.ProfileScalarFieldEnum = {
  ProfileId: 'ProfileId',
  Profile: 'Profile',
  Rate: 'Rate',
  DeliveryAfter: 'DeliveryAfter',
  NotReq: 'NotReq',
  Interpretation: 'Interpretation',
  SubDepartmentId: 'SubDepartmentId',
  cost: 'cost'
};

exports.Prisma.RackScalarFieldEnum = {
  RACKId: 'RACKId',
  RACK: 'RACK',
  ROWId: 'ROWId',
  WALLId: 'WALLId'
};

exports.Prisma.RetestScalarFieldEnum = {
  ReTestId: 'ReTestId',
  ReTestNo: 'ReTestNo',
  ReTestTime: 'ReTestTime',
  ReTestDate: 'ReTestDate',
  CaseId: 'CaseId',
  UserId: 'UserId',
  ReTestAmt: 'ReTestAmt'
};

exports.Prisma.ReturnmedmasterScalarFieldEnum = {
  ReturnMedId: 'ReturnMedId',
  ReturnMedNo: 'ReturnMedNo',
  AdmitionId: 'AdmitionId',
  ReturnDate: 'ReturnDate',
  UserId: 'UserId',
  Discount: 'Discount',
  RoundOff: 'RoundOff',
  NetAmount: 'NetAmount',
  BedId: 'BedId',
  MBedNo: 'MBedNo',
  ReturnType: 'ReturnType',
  SGST: 'SGST',
  CGST: 'CGST'
};

exports.Prisma.RoomnoScalarFieldEnum = {
  RoomNoId: 'RoomNoId',
  RoomNo: 'RoomNo'
};

exports.Prisma.RowScalarFieldEnum = {
  ROWId: 'ROWId',
  ROW: 'ROW',
  WALLId: 'WALLId'
};

exports.Prisma.Saas_registraction_tableScalarFieldEnum = {
  srt_id: 'srt_id',
  srt_hospital_name: 'srt_hospital_name',
  srt_hospital_logo: 'srt_hospital_logo',
  srt_hospital_email: 'srt_hospital_email',
  srt_hospital_type: 'srt_hospital_type',
  srt_phone: 'srt_phone',
  srt_address: 'srt_address',
  srt_city: 'srt_city',
  srt_state: 'srt_state',
  srt_pin_code: 'srt_pin_code',
  srt_no_of_beds: 'srt_no_of_beds',
  srt_emergency_available: 'srt_emergency_available',
  srt_ambulance_contact: 'srt_ambulance_contact',
  srt_status: 'srt_status',
  srt_is_verified: 'srt_is_verified',
  srt_created_at: 'srt_created_at',
  srt_updated_at: 'srt_updated_at'
};

exports.Prisma.SampletypeScalarFieldEnum = {
  SampleTypeId: 'SampleTypeId',
  SampleType: 'SampleType',
  Colour: 'Colour'
};

exports.Prisma.ServiceScalarFieldEnum = {
  SERVICEId: 'SERVICEId',
  SERVICE: 'SERVICE',
  SERVICECODE: 'SERVICECODE'
};

exports.Prisma.ServicetypeScalarFieldEnum = {
  ServiceTypeId: 'ServiceTypeId',
  ServiceType: 'ServiceType',
  AreaId: 'AreaId',
  Rate: 'Rate'
};

exports.Prisma.SpecialityScalarFieldEnum = {
  SpecialityId: 'SpecialityId',
  Speciality: 'Speciality',
  Code: 'Code',
  OT: 'OT'
};

exports.Prisma.StockadjScalarFieldEnum = {
  StockAdjId: 'StockAdjId',
  StockAdjDate: 'StockAdjDate',
  StockAdjNo: 'StockAdjNo',
  AdjType: 'AdjType',
  UserId: 'UserId',
  Reason: 'Reason',
  EntryType: 'EntryType'
};

exports.Prisma.StocktrnsScalarFieldEnum = {
  StockTrnsId: 'StockTrnsId',
  StockTrnsDt: 'StockTrnsDt',
  StockTrnsNo: 'StockTrnsNo',
  UserId: 'UserId',
  Reason: 'Reason',
  indenyn: 'indenyn',
  indenNo: 'indenNo'
};

exports.Prisma.SubcompanyScalarFieldEnum = {
  SubCompanyId: 'SubCompanyId',
  SubCompany: 'SubCompany',
  DescId: 'DescId'
};

exports.Prisma.SubdepartmentScalarFieldEnum = {
  SubDepartmentId: 'SubDepartmentId',
  SubDepartment: 'SubDepartment',
  DepartmentId: 'DepartmentId',
  SpRemTag: 'SpRemTag'
};

exports.Prisma.TestScalarFieldEnum = {
  TestId: 'TestId',
  Test: 'Test',
  ReportingName: 'ReportingName',
  SubDepartmentId: 'SubDepartmentId',
  Method: 'Method',
  Rate: 'Rate',
  DescFormat: 'DescFormat',
  DeliveryAfter: 'DeliveryAfter',
  Introduction: 'Introduction',
  Delivery: 'Delivery',
  Interpretation: 'Interpretation',
  ARate: 'ARate',
  BRate: 'BRate',
  RSlNo: 'RSlNo',
  TestCode: 'TestCode',
  NotReq: 'NotReq',
  RateEdit: 'RateEdit',
  FForm: 'FForm',
  SMType: 'SMType',
  OutSource: 'OutSource',
  IsFormulative: 'IsFormulative',
  FormulaText: 'FormulaText',
  FormulaValue: 'FormulaValue',
  NABLTag: 'NABLTag',
  IsDisc: 'IsDisc',
  NSBilling: 'NSBilling',
  ICURate: 'ICURate',
  CABRate: 'CABRate',
  SUITRate: 'SUITRate',
  SampleTypeId: 'SampleTypeId',
  ActualColName: 'ActualColName',
  IsProfile: 'IsProfile',
  agent: 'agent',
  cNotReq: 'cNotReq',
  cost: 'cost'
};

exports.Prisma.TestparameterScalarFieldEnum = {
  PARAMETERId: 'PARAMETERId',
  PARAMETER: 'PARAMETER',
  TESTId: 'TESTId',
  Rate: 'Rate'
};

exports.Prisma.VisitourScalarFieldEnum = {
  VisitOurId: 'VisitOurId',
  VisitOur: 'VisitOur'
};

exports.Prisma.VisittypeScalarFieldEnum = {
  VisitTypeId: 'VisitTypeId',
  VisitType: 'VisitType',
  RateYN: 'RateYN',
  SrvChYN: 'SrvChYN',
  RefferaId: 'RefferaId',
  REG: 'REG',
  grp: 'grp'
};

exports.Prisma.VisittypegrpScalarFieldEnum = {
  visittypegrpId: 'visittypegrpId',
  visittypegrp: 'visittypegrp'
};

exports.Prisma.WallScalarFieldEnum = {
  WALLId: 'WALLId',
  WALL: 'WALL'
};

exports.Prisma.ZoneScalarFieldEnum = {
  ZoneId: 'ZoneId',
  Zone: 'Zone'
};

exports.Prisma.GenericMedicineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  genericName: 'genericName',
  manufacturer: 'manufacturer',
  strength: 'strength',
  dosageForm: 'dosageForm',
  price: 'price',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.appointment_booking_app_appointments_appointment_type = exports.$Enums.appointment_booking_app_appointments_appointment_type = {
  online: 'online',
  offline: 'offline'
};

exports.appointment_booking_app_appointments_status = exports.$Enums.appointment_booking_app_appointments_status = {
  pending: 'pending',
  accepted: 'accepted',
  cancelled: 'cancelled',
  completed: 'completed'
};

exports.appointment_booking_app_appointments_payment_method = exports.$Enums.appointment_booking_app_appointments_payment_method = {
  cash: 'cash',
  card: 'card',
  upi: 'upi',
  net_banking: 'net_banking',
  cheque: 'cheque'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded'
};

exports.appointment_booking_app_ambulance_pickup_status = exports.$Enums.appointment_booking_app_ambulance_pickup_status = {
  pending: 'pending',
  accepted: 'accepted',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.appointment_booking_app_nursing_bookings_existing_patient = exports.$Enums.appointment_booking_app_nursing_bookings_existing_patient = {
  yes: 'yes',
  no: 'no'
};

exports.appointment_booking_app_nursing_bookings_gender = exports.$Enums.appointment_booking_app_nursing_bookings_gender = {
  Male: 'Male',
  Female: 'Female',
  Other: 'Other'
};

exports.appointment_booking_app_nursing_bookings_status = exports.$Enums.appointment_booking_app_nursing_bookings_status = {
  pending: 'pending',
  confirmed: 'confirmed',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.appointment_booking_app_prescription_delivery_delivery_type = exports.$Enums.appointment_booking_app_prescription_delivery_delivery_type = {
  home_delivery: 'home_delivery',
  hospital_pickup: 'hospital_pickup'
};

exports.appointment_booking_app_prescription_delivery_status = exports.$Enums.appointment_booking_app_prescription_delivery_status = {
  pending: 'pending',
  confirmed: 'confirmed',
  delivered: 'delivered',
  cancelled: 'cancelled'
};

exports.diagnostic_bookings_status = exports.$Enums.diagnostic_bookings_status = {
  pending: 'pending',
  confirmed: 'confirmed',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.saas_registraction_table_srt_hospital_type = exports.$Enums.saas_registraction_table_srt_hospital_type = {
  Private: 'Private',
  Government: 'Government',
  Clinic: 'Clinic',
  Trust: 'Trust'
};

exports.saas_registraction_table_srt_status = exports.$Enums.saas_registraction_table_srt_status = {
  pending: 'pending',
  active: 'active',
  inactive: 'inactive'
};

exports.Prisma.ModelName = {
  Package: 'Package',
  ParameterIndoor: 'ParameterIndoor',
  depgroup: 'depgroup',
  DepartmentIndoor: 'DepartmentIndoor',
  BedMaster: 'BedMaster',
  DayCare: 'DayCare',
  OtMaster: 'OtMaster',
  OtSlot: 'OtSlot',
  OtType: 'OtType',
  OtCategory: 'OtCategory',
  OtItem: 'OtItem',
  AcHead: 'AcHead',
  AcGroup: 'AcGroup',
  AcSubGrp: 'AcSubGrp',
  AcGenLed: 'AcGenLed',
  Cashless: 'Cashless',
  religion: 'religion',
  disease: 'disease',
  cashpaymenthead: 'cashpaymenthead',
  dischargetemplate: 'dischargetemplate',
  appointment_booking_app_appointments: 'appointment_booking_app_appointments',
  AppointmentBookingAppPatient: 'AppointmentBookingAppPatient',
  HealthPackage: 'HealthPackage',
  PackageService: 'PackageService',
  PackagePurchase: 'PackagePurchase',
  mexecutive: 'mexecutive',
  referal: 'referal',
  patientregistration: 'patientregistration',
  outdoorbillmst: 'outdoorbillmst',
  admition: 'admition',
  advice: 'advice',
  agentpayment: 'agentpayment',
  appointment_booking_app_ambulance: 'appointment_booking_app_ambulance',
  appointment_booking_app_ambulance_pickup: 'appointment_booking_app_ambulance_pickup',
  appointment_booking_app_doctor: 'appointment_booking_app_doctor',
  appointment_booking_app_nursing_bookings: 'appointment_booking_app_nursing_bookings',
  appointment_booking_app_nursing_category: 'appointment_booking_app_nursing_category',
  appointment_booking_app_nursing_packages: 'appointment_booking_app_nursing_packages',
  appointment_booking_app_pickup: 'appointment_booking_app_pickup',
  appointment_booking_app_prescription_delivery: 'appointment_booking_app_prescription_delivery',
  area: 'area',
  atcbhd01: 'atcbhd01',
  atcbhd02: 'atcbhd02',
  atcbhd03: 'atcbhd03',
  atcbhd04: 'atcbhd04',
  atcbhd05: 'atcbhd05',
  atcbhd06: 'atcbhd06',
  atcbhd07: 'atcbhd07',
  atcbhd08: 'atcbhd08',
  atcbhd09: 'atcbhd09',
  atcbhd10: 'atcbhd10',
  atcbhd11: 'atcbhd11',
  atcbhd12: 'atcbhd12',
  atcbhd13: 'atcbhd13',
  atcbhd14: 'atcbhd14',
  atcbhd15: 'atcbhd15',
  atcbhd17: 'atcbhd17',
  batch: 'batch',
  billmaster01: 'billmaster01',
  billprinthead: 'billprinthead',
  billreffr01: 'billreffr01',
  biochemistry: 'biochemistry',
  birthcer: 'birthcer',
  bloodformat: 'bloodformat',
  bodyfluid01: 'bodyfluid01',
  bom: 'bom',
  booking01: 'booking01',
  categorymst: 'categorymst',
  challan: 'challan',
  chief: 'chief',
  collector: 'collector',
  companymst: 'companymst',
  consent: 'consent',
  consententry: 'consententry',
  creditcareofmst: 'creditcareofmst',
  ctest01: 'ctest01',
  culturemst: 'culturemst',
  deathcer: 'deathcer',
  department: 'department',
  diagnostic_bookings: 'diagnostic_bookings',
  diago: 'diago',
  dietchart: 'dietchart',
  dietentry: 'dietentry',
  discavd: 'discavd',
  discert: 'discert',
  doctorcashpayment: 'doctorcashpayment',
  doctormaster: 'doctormaster',
  doctorvisit: 'doctorvisit',
  dose: 'dose',
  dpackage: 'dpackage',
  dripcategorymaster: 'dripcategorymaster',
  dtproperties: 'dtproperties',
  duereceipt: 'duereceipt',
  encript: 'encript',
  eyesalemst: 'eyesalemst',
  fb: 'fb',
  godown: 'godown',
  goodsreplacednote: 'goodsreplacednote',
  gstmst: 'gstmst',
  indoorcompany: 'indoorcompany',
  indoormoneyreecipt: 'indoormoneyreecipt',
  ipdbooking: 'ipdbooking',
  issuedepmaster: 'issuedepmaster',
  issuemedmaster: 'issuemedmaster',
  issuemedmasterc: 'issuemedmasterc',
  issuemst01: 'issuemst01',
  itemgroup: 'itemgroup',
  itemmst: 'itemmst',
  itemsubgroup: 'itemsubgroup',
  lab: 'lab',
  medeadvancereceipt: 'medeadvancereceipt',
  medeindoorbill: 'medeindoorbill',
  nurse: 'nurse',
  otbill: 'otbill',
  othercharges: 'othercharges',
  outdoorothercharge: 'outdoorothercharge',
  pack: 'pack',
  pasthistory: 'pasthistory',
  pathologist: 'pathologist',
  pathologistlogin: 'pathologistlogin',
  profile: 'profile',
  rack: 'rack',
  retest: 'retest',
  returnmedmaster: 'returnmedmaster',
  roomno: 'roomno',
  row: 'row',
  saas_registraction_table: 'saas_registraction_table',
  sampletype: 'sampletype',
  service: 'service',
  servicetype: 'servicetype',
  speciality: 'speciality',
  stockadj: 'stockadj',
  stocktrns: 'stocktrns',
  subcompany: 'subcompany',
  subdepartment: 'subdepartment',
  test: 'test',
  testparameter: 'testparameter',
  visitour: 'visitour',
  visittype: 'visittype',
  visittypegrp: 'visittypegrp',
  wall: 'wall',
  zone: 'zone',
  GenericMedicine: 'GenericMedicine'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
